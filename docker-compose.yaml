version: '2'
services:

  ## Demo

  server:
    build:
      context: .
      dockerfile: Dockerfile-server
    container_name: selinon-server
    network_mode: bridge
    privileged: true
    ports:
      - 34000:34000
    links:
      - broker
      - redis
    volumes:
      - ./worker/myapp:/usr/lib/python3.5/site-packages/myapp:ro,z
    environment:
      SERVICE_PORT: 34000
      BROKER_URL: amqp://broker:5672

  worker:
    build:
      context: .
      dockerfile: Dockerfile-worker
    network_mode: bridge
    links:
      - broker
      - redis
      - mongo
      - postgres
    volumes:
      - ./worker/myapp:/usr/lib/python3.5/site-packages/myapp:ro,z
    environment:
      BROKER_URL: amqp://broker:5672
      RESULT_BACKEND_URL: redis://redis:6379/0
      #WORKER_QUEUES: flow1_v0

  # Message broker

  broker:
    image: rabbitmq:3.6.6-management
    container_name: selinon-broker
    network_mode: bridge
    ports:
      - 5672:5672
      - 35000:15672

  flower:
    image: endocode/flower
    container_name: selinon-flower
    network_mode: bridge
    ports:
      - 36000:5555
    links:
      - broker
    environment:
      RABBITMQ_SERVICE_SERVICE_HOST: broker

  ## Databases

  redis:
    image: redis:3.2.1
    container_name: selinon-redis
    network_mode: bridge
    ports:
      - 6379:6379

  mongo:
    image: mongo:3.3
    container_name: selinon-mongo
    network_mode: bridge
    ports:
      - 27017:27017

  postgres:
    image: postgres:9.5
    container_name: selinon-postgres
    network_mode: bridge
    ports:
      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres

  minio-s3:
    image: minio/minio
    command:
        - server
        - --address
        - :8084
        - /export
    container_name: selinon-s3
    network_mode: bridge
    ports:
      - 8084:8084
    environment:
      MINIO_ACCESS_KEY: E5UENY2EOTV2U7DP0ODQ
      MINIO_SECRET_KEY: tfIv8oNKIpfwGYlUe8ZErnMXZzOxPhVagKBiE6qV
    # Uncomment this if you want to have S3 data persistent
    #volumes:
    # - ./hack/s3:/export:rw,z
    # - ./hack/s3:/root/.mini:rw,z

  ## Database frondends

  redis-commander:
    image: emmenko/redis-commander:0.3.2
    container_name: selinon-redis-commander
    network_mode: bridge
    links:
      - redis
    ports:
      - 8082:8081
    command: ['--redis-port', '6379', '--redis-host', 'redis']

  mongo-express:
    image: mongo-express
    container_name: selinon-mongo-express
    network_mode: bridge
    links:
      - mongo
    ports:
      - 8083:8081

  pgweb:
    image: sosedoff/pgweb
    container_name: selinon-pgweb
    network_mode: bridge
    links:
      - postgres
    ports:
      - 8081:8081
    environment:
      # sslmode=disable because: https://github.com/sosedoff/pgweb/issues/23#issuecomment-60840307
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/postgres?sslmode=disable
